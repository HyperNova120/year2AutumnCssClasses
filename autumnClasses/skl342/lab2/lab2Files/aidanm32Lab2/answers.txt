1. 
-the call to display2() fails because it takes a reference to an int where in main we are trying to give it the value of aPtr not a reference to it
-by changing *aPtr you also changed a to the same value

3. 
HEAP SUMMARY:
==1688==     in use at exit: 0 bytes in 0 blocks
==1688==   total heap usage: 5 allocs, 5 frees, 73,764 bytes allocated
==1688== 
==1688== All heap blocks were freed -- no leaks are possible

-it says there are no leaks because everything that was allocated was also deallocated in program

3.
HEAP SUMMARY:
==7052==     in use at exit: 20 bytes in 1 blocks
==7052==   total heap usage: 5 allocs, 4 frees, 73,764 bytes allocated
==7052== 
==7052== 20 bytes in 1 blocks are definitely lost in loss record 1 of 1
==7052==    at 0x4C3B0B3: operator new[](unsigned long) (vg_replace_malloc.c:725)
==7052==    by 0x400C24: dynamicAlloc3(int) (Pointer3.cpp:49)
==7052==    by 0x400DB8: main (Pointer3.cpp:72)
==7052== 
==7052== LEAK SUMMARY:
==7052==    definitely lost: 20 bytes in 1 blocks
==7052==    indirectly lost: 0 bytes in 0 blocks
==7052==      possibly lost: 0 bytes in 0 blocks
==7052==    still reachable: 0 bytes in 0 blocks
==7052==         suppressed: 0 bytes in 0 blocks

4. 
-in java you declare an int[] foo = new int[] {} when setting an array, but in c++ you don't use new or int[] and just the {}
-i like the version where we use arrays better because it feels more clear at a glance what we are doing than when we use pointer syntax

5.
-we set the pointers to null after deleting because delete gets rid of the heap memory allocations but the pointers still point to those 
    memory addresses and people using them wont know that memory has been dealocated, setting them to nullptr means they dont point to 
    any memory address and anybody trying to use them knows they dont point to anything